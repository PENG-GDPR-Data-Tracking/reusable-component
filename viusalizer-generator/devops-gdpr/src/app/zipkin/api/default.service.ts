/**
 * Zipkin API
 * Zipkin's v2 API currently includes a POST endpoint that can receive spans.
 *
 * OpenAPI spec version: 2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { DependencyLink } from '../model/dependencyLink';
import { ListOfSpans } from '../model/listOfSpans';
import { ListOfTraces } from '../model/listOfTraces';
import { Trace } from '../model/trace';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class DefaultService {
  protected basePath = 'http://localhost:9411/api/v2';
  //   protected basePath = 'http://164.90.214.160:9411/api/v2';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   * Returns a subset of keys from Span.tags configured for value autocompletion. This helps sites populate common keys into the annotationQuery parameter of the /traces endpoint. For example, a UI can allow users to select site-specific keys from a drop-down as opposed to typing them in manually. This helps guide users towards the more correct keys and avoids typos or formatting problems.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public autocompleteKeysGet(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<string>>;
  public autocompleteKeysGet(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<string>>>;
  public autocompleteKeysGet(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<string>>>;
  public autocompleteKeysGet(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<string>>(
      `${this.basePath}/autocompleteKeys`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   * Returns all known values of Span.tags for the given autocomplete key. Refer to the description of /autocompleteKeys for the use case.
   * @param key Name of the autocomplete key from the /autocompleteKeys endpoint.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public autocompleteValuesGet(
    key: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<string>>;
  public autocompleteValuesGet(
    key: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<string>>>;
  public autocompleteValuesGet(
    key: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<string>>>;
  public autocompleteValuesGet(
    key: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (key === null || key === undefined) {
      throw new Error(
        'Required parameter key was null or undefined when calling autocompleteValuesGet.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (key !== undefined && key !== null) {
      queryParameters = queryParameters.set('key', <any>key);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<string>>(
      `${this.basePath}/autocompleteValues`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   * Returns service links derived from spans.
   * @param endTs only return links from spans where &#x60;Span.timestamp&#x60;  are at or before this time in epoch milliseconds.
   * @param lookback only return links where all Span.timestamp are at or after (&#x60;endTs - * lookback&#x60;) in milliseconds. Defaults to &#x60;endTs&#x60;, limited to a system parameter &#x60;QUERY_LOOKBACK&#x60;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public dependenciesGet(
    endTs: number,
    lookback?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DependencyLink>>;
  public dependenciesGet(
    endTs: number,
    lookback?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DependencyLink>>>;
  public dependenciesGet(
    endTs: number,
    lookback?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DependencyLink>>>;
  public dependenciesGet(
    endTs: number,
    lookback?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (endTs === null || endTs === undefined) {
      throw new Error(
        'Required parameter endTs was null or undefined when calling dependenciesGet.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (endTs !== undefined && endTs !== null) {
      queryParameters = queryParameters.set('endTs', <any>endTs);
    }
    if (lookback !== undefined && lookback !== null) {
      queryParameters = queryParameters.set('lookback', <any>lookback);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<DependencyLink>>(
      `${this.basePath}/dependencies`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   * Returns a list of all service names associated with span endpoints.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public servicesGet(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<string>>;
  public servicesGet(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<string>>>;
  public servicesGet(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<string>>>;
  public servicesGet(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Array<string>>(`${this.basePath}/services`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * Get all the span names recorded by a particular service
   * @param serviceName Ex favstar (required) - Lower-case label of a node in the service graph. The /services endpoint enumerates possible input values.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public spansGet(
    serviceName: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ListOfSpans>;
  public spansGet(
    serviceName: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ListOfSpans>>;
  public spansGet(
    serviceName: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ListOfSpans>>;
  public spansGet(
    serviceName: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (serviceName === null || serviceName === undefined) {
      throw new Error(
        'Required parameter serviceName was null or undefined when calling spansGet.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (serviceName !== undefined && serviceName !== null) {
      queryParameters = queryParameters.set('serviceName', <any>serviceName);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<ListOfSpans>(`${this.basePath}/spans`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Uploads a list of spans encoded per content-type, for example json.
   *
   * @param spans A list of spans that belong to any trace.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public spansPost(
    spans: ListOfSpans,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public spansPost(
    spans: ListOfSpans,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public spansPost(
    spans: ListOfSpans,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public spansPost(
    spans: ListOfSpans,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (spans === null || spans === undefined) {
      throw new Error(
        'Required parameter spans was null or undefined when calling spansPost.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json', 'application/x-protobuf'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/spans`, spans, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   * Invoking this request retrieves any traces with the specified IDs.  Results return in any order, and can be empty.  Use /trace/{traceId} to request a single trace ID: &lt;2 trace IDs is a bad request.
   * @param traceIds Comma delimited list of at least two unique trace identifiers.  Encoded as 16 or 32 lowercase hex characters corresponding to 64 or 128 bits. For example, a 128bit trace ID looks like 4e441824ec2b6a44ffdc9bb9a6453df3
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public traceManyGet(
    traceIds: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ListOfTraces>;
  public traceManyGet(
    traceIds: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ListOfTraces>>;
  public traceManyGet(
    traceIds: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ListOfTraces>>;
  public traceManyGet(
    traceIds: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (traceIds === null || traceIds === undefined) {
      throw new Error(
        'Required parameter traceIds was null or undefined when calling traceManyGet.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (traceIds !== undefined && traceIds !== null) {
      queryParameters = queryParameters.set('traceIds', <any>traceIds);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<ListOfTraces>(`${this.basePath}/traceMany`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   *
   *
   * @param traceId Trace identifier, set on all spans within it.  Encoded as 16 or 32 lowercase hex characters corresponding to 64 or 128 bits. For example, a 128bit trace ID looks like 4e441824ec2b6a44ffdc9bb9a6453df3
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public traceTraceIdGet(
    traceId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Trace>;
  public traceTraceIdGet(
    traceId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Trace>>;
  public traceTraceIdGet(
    traceId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Trace>>;
  public traceTraceIdGet(
    traceId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (traceId === null || traceId === undefined) {
      throw new Error(
        'Required parameter traceId was null or undefined when calling traceTraceIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<Trace>(
      `${this.basePath}/trace/${encodeURIComponent(String(traceId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   * Invoking this request retrieves traces matching the below filters.  Results should be filtered against endTs, subject to limit and lookback. For example, if endTs is 10:20 today, limit is 10, and lookback is 7 days, traces returned should be those nearest to 10:20 today, not 10:20 a week ago.  Time units of endTs and lookback are milliseconds as opposed to microseconds, the grain of Span.timestamp. Milliseconds is a more familiar and supported granularity for query, index and windowing functions
   * @param serviceName Ex favstar (required) - Lower-case label of a node in the service graph. The /services endpoint enumerates possible input values.
   * @param spanName Ex get - name of a span in a trace. Only return traces that contains spans with this name.
   * @param annotationQuery Ex. &#x60;http.uri&#x3D;/foo and retried&#x60; - If key/value (has an &#x60;&#x3D;&#x60;), constrains against Span.tags entres. If just a word, constrains against Span.annotations[].value or Span.tags[].key. Any values are AND against eachother. This means a span in the trace must match all of these.
   * @param minDuration Ex. 100000 (for 100ms). Only return traces whose &#x60;Span.duration&#x60; is greater than or equal to minDuration microseconds.
   * @param maxDuration Only return traces whose Span.duration is less than or equal to &#x60;maxDuration&#x60; microseconds. Only valid with minDuration.
   * @param endTs Only return traces where all Span.timestamp are at or before this time in epoch milliseconds. Defaults to current time.
   * @param lookback Only return traces where all  Span.timestamp are at or after (endTs - * lookback) in milliseconds. Defaults to endTs, limited to a system parameter QUERY_LOOKBACK
   * @param limit Maximum number of traces to return. Defaults to 10
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public tracesGet(
    serviceName?: string,
    spanName?: string,
    annotationQuery?: string,
    minDuration?: number,
    maxDuration?: number,
    endTs?: number,
    lookback?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ListOfTraces>;
  public tracesGet(
    serviceName?: string,
    spanName?: string,
    annotationQuery?: string,
    minDuration?: number,
    maxDuration?: number,
    endTs?: number,
    lookback?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ListOfTraces>>;
  public tracesGet(
    serviceName?: string,
    spanName?: string,
    annotationQuery?: string,
    minDuration?: number,
    maxDuration?: number,
    endTs?: number,
    lookback?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ListOfTraces>>;
  public tracesGet(
    serviceName?: string,
    spanName?: string,
    annotationQuery?: string,
    minDuration?: number,
    maxDuration?: number,
    endTs?: number,
    lookback?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (serviceName !== undefined && serviceName !== null) {
      queryParameters = queryParameters.set('serviceName', <any>serviceName);
    }
    if (spanName !== undefined && spanName !== null) {
      queryParameters = queryParameters.set('spanName', <any>spanName);
    }
    if (annotationQuery !== undefined && annotationQuery !== null) {
      queryParameters = queryParameters.set(
        'annotationQuery',
        <any>annotationQuery
      );
    }
    if (minDuration !== undefined && minDuration !== null) {
      queryParameters = queryParameters.set('minDuration', <any>minDuration);
    }
    if (maxDuration !== undefined && maxDuration !== null) {
      queryParameters = queryParameters.set('maxDuration', <any>maxDuration);
    }
    if (endTs !== undefined && endTs !== null) {
      queryParameters = queryParameters.set('endTs', <any>endTs);
    }
    if (lookback !== undefined && lookback !== null) {
      queryParameters = queryParameters.set('lookback', <any>lookback);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters = queryParameters.set('limit', <any>limit);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<ListOfTraces>(`${this.basePath}/traces`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
